name: Plugin Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  phpcs:
    uses: ./.github/workflows/phpcs.yml

  test:
    needs: phpcs
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, mysqli, curl, zip
        coverage: xdebug
        xdebug-version: '3.2.1'
        xdebug-mode: coverage
    
    - name: Install WP-CLI
      run: |
        curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        chmod +x wp-cli.phar
        sudo mv wp-cli.phar /usr/local/bin/wp
    
    - name: Install Composer dependencies
      run: |
        composer install --prefer-dist --no-progress --no-dev
        composer update --prefer-stable
    
    - name: Prepare WordPress Test Environment
      run: |
        # Create directories with proper permissions
        echo "Creating directories..."
        sudo rm -rf /tmp/wordpress-tests-lib
        sudo rm -rf /tmp/wordpress
        sudo mkdir -p /tmp/wordpress-tests-lib
        sudo mkdir -p /tmp/wordpress
        sudo chmod -R 755 /tmp/wordpress-tests-lib
        sudo chmod -R 755 /tmp/wordpress
        sudo chown -R $USER:$USER /tmp/wordpress-tests-lib
        sudo chown -R $USER:$USER /tmp/wordpress
        
        # Set environment variables
        export WP_TESTS_DIR=/tmp/wordpress-tests-lib
        export WP_CORE_DIR=/tmp/wordpress
        
        # Verify WordPress installation path
        echo "Verifying WordPress installation path..."
        echo "Current directory: $(pwd)"
        echo "WP_CORE_DIR: $WP_CORE_DIR"
        echo "WP_TESTS_DIR: $WP_TESTS_DIR"
        
        # Check if WordPress is installed
        if [ ! -f "/tmp/wordpress/wp-settings.php" ]; then
          echo "WordPress not found. Downloading..."
          
          # Ensure we're in the correct directory
          cd /tmp/wordpress
          echo "Changed to directory: $(pwd)"
          
          # Function to download WordPress with retries
          download_wordpress() {
            local max_attempts=3
            local attempt=1
            local wait_time=10  # Increased wait time between retries
            
            while [ $attempt -le $max_attempts ]; do
              echo "Download attempt $attempt of $max_attempts..."
              
              # Test network connectivity with timeout
              echo "Testing network connectivity..."
              if ! curl -s --max-time 10 --head https://wordpress.org > /dev/null; then
                echo "Network connectivity check failed. Waiting $wait_time seconds..."
                sleep $wait_time
                attempt=$((attempt + 1))
                continue
              fi
              
              # Download WordPress core with explicit path and debug output
              echo "Starting WordPress download..."
              # First download to a temporary location
              TEMP_DIR="/tmp/wp-temp"
              mkdir -p "$TEMP_DIR"
              
              # Download with progress bar and slower speed
              if curl -L --max-time 300 --limit-rate 500k \
                https://wordpress.org/latest.tar.gz \
                --progress-bar \
                -o "$TEMP_DIR/wordpress.tar.gz"; then
                
                echo "Download completed, extracting files..."
                # Extract to temporary location first
                tar -xzf "$TEMP_DIR/wordpress.tar.gz" -C "$TEMP_DIR"
                
                # Move files to final location
                echo "Moving files to final location..."
                mv "$TEMP_DIR/wordpress"/* /tmp/wordpress/
                
                # Clean up
                rm -rf "$TEMP_DIR"
                
                # Verify download success
                if [ -f "/tmp/wordpress/wp-settings.php" ]; then
                  echo "WordPress downloaded and extracted successfully!"
                  return 0
                else
                  echo "Download completed but wp-settings.php not found"
                  echo "Directory contents:"
                  ls -la /tmp/wordpress/
                fi
              else
                echo "Download failed with exit code $?"
                echo "Cleaning up temporary files..."
                rm -rf "$TEMP_DIR"
              fi
              
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting $wait_time seconds before retry..."
                sleep $wait_time
              fi
              
              attempt=$((attempt + 1))
            done
            
            echo "Failed to download WordPress after $max_attempts attempts"
            return 1
          }
          
          # Execute download with retries
          if ! download_wordpress; then
            echo "Error: WordPress download failed after all retry attempts"
            echo "Directory contents:"
            ls -la /tmp/wordpress/
            exit 1
          fi
          
          # Verify download size and structure
          echo "Verifying download size and structure..."
          du -sh /tmp/wordpress/
          echo "Directory structure:"
          find /tmp/wordpress -maxdepth 2 -type d | sort
          
          # Create wp-config.php
          echo "Creating wp-config.php..."
          wp config create \
            --path=/tmp/wordpress \
            --dbname=wordpress_test \
            --dbuser=root \
            --dbpass=root \
            --dbhost=127.0.0.1 \
            --allow-root
          
          # Verify WordPress core files
          echo "Verifying WordPress core files..."
          ls -la /tmp/wordpress/
          
          # Check for critical WordPress files
          CRITICAL_FILES=(
            "wp-settings.php"
            "wp-config.php"
            "wp-includes/version.php"
            "wp-includes/functions.php"
            "wp-includes/class-wp-phpmailer.php"
          )
          
          for file in "${CRITICAL_FILES[@]}"; do
            if [ ! -f "/tmp/wordpress/$file" ]; then
              echo "Error: Critical WordPress file not found: $file"
              echo "Directory contents:"
              ls -la "/tmp/wordpress/${file%/*}"
              exit 1
            fi
          done
        else
          echo "WordPress already installed."
        fi
        
        # Verify wp-includes directory
        if [ ! -d "/tmp/wordpress/wp-includes" ]; then
          echo "Error: WordPress includes directory not found"
          echo "Directory contents:"
          ls -la /tmp/wordpress/
          exit 1
        fi
        
        # Install WordPress test suite
        echo "Installing WordPress test suite..."
        sudo apt-get update
        sudo apt-get install -y subversion
        
        # Create test directories with proper permissions
        echo "Creating test directories..."
        mkdir -p /tmp/wordpress-tests-lib/includes
        mkdir -p /tmp/wordpress-tests-lib/data
        chmod -R 755 /tmp/wordpress-tests-lib/includes
        chmod -R 755 /tmp/wordpress-tests-lib/data
        
        # Check if test suite is installed
        echo "Checking WordPress test suite installation..."
        if [ ! -f "/tmp/wordpress-tests-lib/includes/functions.php" ]; then
          echo "WordPress test suite not found. Downloading..."
          
          # Download WordPress test suite
          svn co --quiet https://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ /tmp/wordpress-tests-lib/includes
          svn co --quiet https://develop.svn.wordpress.org/trunk/tests/phpunit/data/ /tmp/wordpress-tests-lib/data
          
          # Download critical test files directly
          curl -s https://raw.githubusercontent.com/WordPress/wordpress-develop/trunk/tests/phpunit/includes/functions.php > /tmp/wordpress-tests-lib/includes/functions.php
          curl -s https://raw.githubusercontent.com/WordPress/wordpress-develop/trunk/tests/phpunit/includes/bootstrap.php > /tmp/wordpress-tests-lib/includes/bootstrap.php
        else
          echo "WordPress test suite already installed."
        fi
        
        # Verify test files
        echo "Verifying test files..."
        ls -la /tmp/wordpress-tests-lib/includes/
        
        # Check for critical test files
        CRITICAL_TEST_FILES=(
          "functions.php"
          "bootstrap.php"
        )
        
        for file in "${CRITICAL_TEST_FILES[@]}"; do
          if [ ! -f "/tmp/wordpress-tests-lib/includes/$file" ]; then
            echo "Error: Critical test file not found: $file"
            echo "Directory contents:"
            ls -la /tmp/wordpress-tests-lib/includes/
            exit 1
          fi
        done
        
        # Install test suite
        echo "Installing plugin test suite..."
        cd $GITHUB_WORKSPACE
        wp scaffold plugin-tests ${{ github.event.repository.name }} --allow-root
        
        # Create wp-tests-config.php
        echo "Creating test configuration..."
        wp config create \
          --path=/tmp/wordpress-tests-lib \
          --dbname=wordpress_test \
          --dbuser=root \
          --dbpass=root \
          --dbhost=127.0.0.1 \
          --allow-root
        
        # Verify test configuration
        if [ ! -f "/tmp/wordpress-tests-lib/wp-tests-config.php" ]; then
          echo "Error: WordPress test configuration not created"
          echo "Directory contents:"
          ls -la /tmp/wordpress-tests-lib/
          exit 1
        fi
        
        # Set final permissions
        echo "Setting final permissions..."
        sudo chmod -R 755 /tmp/wordpress-tests-lib
        sudo chmod -R 755 /tmp/wordpress
        sudo chown -R $USER:$USER /tmp/wordpress-tests-lib
        sudo chown -R $USER:$USER /tmp/wordpress
        
        # Final verification
        echo "Performing final verification..."
        echo "Current directory: $(pwd)"
        echo "WP_CORE_DIR: $WP_CORE_DIR"
        echo "WP_TESTS_DIR: $WP_TESTS_DIR"
        ls -la /tmp/wordpress/
        ls -la /tmp/wordpress-tests-lib/

    - name: Verify Test Environment
      run: |
        echo "Verifying test environment permissions..."
        
        # Create directories if they don't exist
        sudo mkdir -p /tmp/wordpress
        sudo mkdir -p /tmp/wordpress-tests-lib
        
        # Set proper permissions
        sudo chmod -R 755 /tmp/wordpress
        sudo chmod -R 755 /tmp/wordpress-tests-lib
        
        # Set proper ownership
        sudo chown -R $USER:$USER /tmp/wordpress
        sudo chown -R $USER:$USER /tmp/wordpress-tests-lib
        
        # Verify permissions
        echo "Checking WordPress directory permissions..."
        ls -la /tmp/wordpress
        if [ ! -w "/tmp/wordpress" ]; then
          echo "Error: WordPress directory is not writable"
          sudo chmod -R 777 /tmp/wordpress
          if [ ! -w "/tmp/wordpress" ]; then
            echo "Error: Failed to set WordPress directory permissions"
            exit 1
          fi
        fi
        
        echo "Checking WordPress tests directory permissions..."
        ls -la /tmp/wordpress-tests-lib
        if [ ! -w "/tmp/wordpress-tests-lib" ]; then
          echo "Error: WordPress tests directory is not writable"
          sudo chmod -R 777 /tmp/wordpress-tests-lib
          if [ ! -w "/tmp/wordpress-tests-lib" ]; then
            echo "Error: Failed to set WordPress tests directory permissions"
            exit 1
          fi
        fi
        
        # Verify environment variables
        echo "Checking environment variables..."
        echo "WP_CORE_DIR: $WP_CORE_DIR"
        echo "WP_TESTS_DIR: $WP_TESTS_DIR"
        
        # Final verification
        echo "Final directory permissions:"
        ls -la /tmp/
        echo "WordPress directory contents:"
        ls -la /tmp/wordpress/
        echo "WordPress tests directory contents:"
        ls -la /tmp/wordpress-tests-lib/

    - name: Run PHPUnit with Coverage
      run: |
        mkdir -p tests/coverage
        
        # Ensure PHPUnit is installed
        composer require --dev phpunit/phpunit
        
        # Run PHPUnit with coverage
        vendor/bin/phpunit \
          --coverage-html tests/coverage \
          --coverage-clover tests/coverage.xml \
          --configuration phpunit.xml.dist
        
        # Verify coverage file
        if [ ! -f "tests/coverage.xml" ]; then
          echo "Coverage file not generated"
          exit 1
        fi
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage.xml
        fail_ci_if_error: true
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        name: codecov-umbrella

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
    
    - name: Create ZIP file
      run: |
        zip -r plugin-release.zip . \
          -x "*.git*" \
          -x "*.github*" \
          -x "vendor/*/tests" \
          -x "composer.*" \
          -x "phpunit.xml*" \
          -x "phpcs.xml*" \
          -x "tests/*"
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./plugin-release.zip
        asset_name: plugin-release.zip
        asset_content_type: application/zip