name: Plugin Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  phpcs:
    uses: ./.github/workflows/phpcs.yml

  test:
    needs: phpcs
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, mysqli, curl, zip
        coverage: xdebug
        xdebug-version: '3.2.1'
        xdebug-mode: coverage
    
    - name: Install WP-CLI
      run: |
        curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
        chmod +x wp-cli.phar
        sudo mv wp-cli.phar /usr/local/bin/wp
    
    - name: Install Composer dependencies
      run: |
        composer install --prefer-dist --no-progress --no-dev
        composer update --prefer-stable
    
    - name: Prepare WordPress Test Environment
      run: |
        # Create directories with proper permissions
        sudo mkdir -p /tmp/wordpress-tests-lib
        sudo mkdir -p /tmp/wordpress
        sudo chown -R $USER:$USER /tmp/wordpress-tests-lib
        sudo chown -R $USER:$USER /tmp/wordpress
        
        # Set environment variables
        export WP_TESTS_DIR=/tmp/wordpress-tests-lib
        export WP_CORE_DIR=/tmp/wordpress
        
        # Download WordPress core
        wp core download --path=$WP_CORE_DIR --allow-root
        
        # Verify WordPress core files
        echo "Verifying WordPress core files..."
        ls -la $WP_CORE_DIR/
        if [ ! -f "$WP_CORE_DIR/wp-settings.php" ]; then
          echo "Error: WordPress core files not downloaded correctly"
          exit 1
        fi
        if [ ! -d "$WP_CORE_DIR/wp-includes" ]; then
          echo "Error: WordPress includes directory not found"
          exit 1
        fi
        
        # Install WordPress test suite
        sudo apt-get update
        sudo apt-get install -y subversion
        
        # Create test directories with proper permissions
        mkdir -p $WP_TESTS_DIR/includes
        mkdir -p $WP_TESTS_DIR/data
        
        # Download WordPress test suite
        svn co --quiet https://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ $WP_TESTS_DIR/includes
        svn co --quiet https://develop.svn.wordpress.org/trunk/tests/phpunit/data/ $WP_TESTS_DIR/data
        
        # Download critical test files directly
        curl -s https://raw.githubusercontent.com/WordPress/wordpress-develop/trunk/tests/phpunit/includes/functions.php > $WP_TESTS_DIR/includes/functions.php
        curl -s https://raw.githubusercontent.com/WordPress/wordpress-develop/trunk/tests/phpunit/includes/bootstrap.php > $WP_TESTS_DIR/includes/bootstrap.php
        
        # Verify test files
        echo "Verifying test files..."
        ls -la $WP_TESTS_DIR/includes/
        if [ ! -f "$WP_TESTS_DIR/includes/functions.php" ]; then
          echo "Error: functions.php not found"
          exit 1
        fi
        if [ ! -f "$WP_TESTS_DIR/includes/bootstrap.php" ]; then
          echo "Error: bootstrap.php not found"
          exit 1
        fi
        
        # Install test suite
        wp scaffold plugin-tests ${{ github.event.repository.name }} --allow-root
        
        # Create wp-tests-config.php
        wp config create \
          --path=$WP_TESTS_DIR \
          --dbname=wordpress_test \
          --dbuser=root \
          --dbpass=root \
          --dbhost=127.0.0.1 \
          --allow-root
        
        # Verify test configuration
        if [ ! -f "$WP_TESTS_DIR/wp-tests-config.php" ]; then
          echo "Error: WordPress test configuration not created"
          exit 1
        fi
        
        # Set proper permissions
        sudo chown -R $USER:$USER $WP_TESTS_DIR
        sudo chown -R $USER:$USER $WP_CORE_DIR
    
    - name: Run PHPUnit with Coverage
      run: |
        mkdir -p tests/coverage
        
        # Ensure PHPUnit is installed
        composer require --dev phpunit/phpunit
        
        # Run PHPUnit with coverage
        vendor/bin/phpunit \
          --coverage-html tests/coverage \
          --coverage-clover tests/coverage.xml \
          --configuration phpunit.xml.dist
        
        # Verify coverage file
        if [ ! -f "tests/coverage.xml" ]; then
          echo "Coverage file not generated"
          exit 1
        fi
    
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/coverage.xml
        fail_ci_if_error: true
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        name: codecov-umbrella

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
    
    - name: Create ZIP file
      run: |
        zip -r plugin-release.zip . \
          -x "*.git*" \
          -x "*.github*" \
          -x "vendor/*/tests" \
          -x "composer.*" \
          -x "phpunit.xml*" \
          -x "phpcs.xml*" \
          -x "tests/*"
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./plugin-release.zip
        asset_name: plugin-release.zip
        asset_content_type: application/zip